{"filter":false,"title":"test_app.py","tooltip":"/test_app.py","ace":{"folds":[],"scrolltop":1002.9999999999999,"scrollleft":0,"selection":{"start":{"row":99,"column":33},"end":{"row":99,"column":33},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"hash":"393a0fb514354fb1484543daa610025702b6e497","undoManager":{"mark":21,"position":21,"stack":[[{"start":{"row":0,"column":0},"end":{"row":112,"column":0},"action":"remove","lines":["import os","import pytest","import json","from flask import Flask","from app import app, table","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb(moto):","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with moto.mock_dynamodb2():","        # Set up a DynamoDB resource to mock the actual database","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table  # Provide the mock table for tests","","def test_index(client, mock_dynamodb):","    \"\"\"Test the index route.\"\"\"","    # Simulate adding a job to the mock DynamoDB","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a GET request to the index route","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb, mocker):","    \"\"\"Test the add_job route.\"\"\"","    # Mock the file upload","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    # Simulate the form data","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Should redirect after adding the job","","    # Check if the job was inserted into DynamoDB","    response = mock_dynamodb.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb):","    \"\"\"Test the edit_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to edit the job status","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302  # Should redirect after editing","","    # Check if the status was updated","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb):","    \"\"\"Test the delete_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to delete the job","    response = client.post('/delete/1234')","    assert response.status_code == 302  # Should redirect after deleting","","    # Verify the item is deleted","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response","",""],"id":7},{"start":{"row":0,"column":0},"end":{"row":110,"column":0},"action":"insert","lines":["import pytest","import boto3","from moto import mock_dynamodb2","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb():","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with mock_dynamodb2():","        # Set up a DynamoDB resource to mock the actual database","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table  # Provide the mock table for tests","","def test_index(client, mock_dynamodb):","    \"\"\"Test the index route.\"\"\"","    # Simulate adding a job to the mock DynamoDB","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a GET request to the index route","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb, mocker):","    \"\"\"Test the add_job route.\"\"\"","    # Mock the file upload","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    # Simulate the form data","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Should redirect after adding the job","","    # Check if the job was inserted into DynamoDB","    response = mock_dynamodb.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb):","    \"\"\"Test the edit_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to edit the job status","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302  # Should redirect after editing","","    # Check if the status was updated","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb):","    \"\"\"Test the delete_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to delete the job","    response = client.post('/delete/1234')","    assert response.status_code == 302  # Should redirect after deleting","","    # Verify the item is deleted","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response",""]}],[{"start":{"row":109,"column":33},"end":{"row":110,"column":0},"action":"remove","lines":["",""],"id":8}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":31},"action":"remove","lines":["from moto import mock_dynamodb2"],"id":9},{"start":{"row":2,"column":0},"end":{"row":2,"column":30},"action":"insert","lines":["from moto import mock_dynamodb"]}],[{"start":{"row":0,"column":0},"end":{"row":109,"column":33},"action":"remove","lines":["import pytest","import boto3","from moto import mock_dynamodb","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb():","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with mock_dynamodb2():","        # Set up a DynamoDB resource to mock the actual database","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table  # Provide the mock table for tests","","def test_index(client, mock_dynamodb):","    \"\"\"Test the index route.\"\"\"","    # Simulate adding a job to the mock DynamoDB","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a GET request to the index route","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb, mocker):","    \"\"\"Test the add_job route.\"\"\"","    # Mock the file upload","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    # Simulate the form data","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Should redirect after adding the job","","    # Check if the job was inserted into DynamoDB","    response = mock_dynamodb.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb):","    \"\"\"Test the edit_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to edit the job status","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302  # Should redirect after editing","","    # Check if the status was updated","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb):","    \"\"\"Test the delete_job route.\"\"\"","    # Create a job item","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb.put_item(Item=job_data)","","    # Perform a POST request to delete the job","    response = client.post('/delete/1234')","    assert response.status_code == 302  # Should redirect after deleting","","    # Verify the item is deleted","    response = mock_dynamodb.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response"],"id":10},{"start":{"row":0,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["import pytest","import boto3","from moto import mock_dynamodb","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb_table():","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with mock_dynamodb():","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table","","def test_index(client, mock_dynamodb_table):","    \"\"\"Test the index route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Redirect after adding job","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb_table):","    \"\"\"Test the edit_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb_table):","    \"\"\"Test the delete_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/delete/1234')","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response",""]}],[{"start":{"row":97,"column":33},"end":{"row":98,"column":0},"action":"remove","lines":["",""],"id":11}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":30},"action":"remove","lines":["from moto import mock_dynamodb"],"id":12},{"start":{"row":2,"column":0},"end":{"row":2,"column":39},"action":"insert","lines":["from moto.dynamodb import mock_dynamodb"]}],[{"start":{"row":2,"column":26},"end":{"row":2,"column":39},"action":"remove","lines":["mock_dynamodb"],"id":14},{"start":{"row":2,"column":26},"end":{"row":2,"column":39},"action":"insert","lines":["mock_dynamodb"]}],[{"start":{"row":2,"column":10},"end":{"row":2,"column":18},"action":"remove","lines":["dynamodb"],"id":15},{"start":{"row":2,"column":9},"end":{"row":2,"column":10},"action":"remove","lines":["."]}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":30},"action":"remove","lines":["from moto import mock_dynamodb"],"id":16},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from moto.dynamodb.models import mock_dynamodb",""]}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":46},"action":"remove","lines":["from moto.dynamodb.models import mock_dynamodb"],"id":17},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from moto.core import mock_aws",""]}],[{"start":{"row":0,"column":0},"end":{"row":99,"column":33},"action":"remove","lines":["import pytest","import boto3","from moto.core import mock_aws","","","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb_table():","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with mock_dynamodb():","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table","","def test_index(client, mock_dynamodb_table):","    \"\"\"Test the index route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Redirect after adding job","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb_table):","    \"\"\"Test the edit_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb_table):","    \"\"\"Test the delete_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/delete/1234')","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response"],"id":18},{"start":{"row":0,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["import pytest","import boto3","from moto.core import mock_aws","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb_table():","    \"\"\"Fixture to mock AWS DynamoDB using mock_aws.\"\"\"","    with mock_aws():","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table","","def test_index(client, mock_dynamodb_table):","    \"\"\"Test the index route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb_table):","    \"\"\"Test the edit_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb_table):","    \"\"\"Test the delete_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/delete/1234')","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response",""]}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":30},"action":"remove","lines":["from moto.core import mock_aws"],"id":20},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["pip install \"moto[dynamodb2]==4.1.13\"",""]}],[{"start":{"row":2,"column":0},"end":{"row":2,"column":37},"action":"remove","lines":["pip install \"moto[dynamodb2]==4.1.13\""],"id":21},{"start":{"row":2,"column":0},"end":{"row":3,"column":0},"action":"insert","lines":["from moto import mock_dynamodb",""]}],[{"start":{"row":0,"column":0},"end":{"row":100,"column":0},"action":"remove","lines":["import pytest","import boto3","from moto import mock_dynamodb","","","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb_table():","    \"\"\"Fixture to mock AWS DynamoDB using mock_aws.\"\"\"","    with mock_aws():","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table","","def test_index(client, mock_dynamodb_table):","    \"\"\"Test the index route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb_table):","    \"\"\"Test the edit_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb_table):","    \"\"\"Test the delete_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/delete/1234')","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response",""],"id":22},{"start":{"row":0,"column":0},"end":{"row":98,"column":0},"action":"insert","lines":["import pytest","import boto3","from moto import mock_dynamodb","from app import app","","@pytest.fixture","def client():","    \"\"\"Set up the Flask testing client.\"\"\"","    app.config['TESTING'] = True","    with app.test_client() as client:","        yield client","","@pytest.fixture","def mock_dynamodb_table():","    \"\"\"Fixture to mock AWS DynamoDB with Moto.\"\"\"","    with mock_dynamodb():","        dynamodb = boto3.resource('dynamodb', region_name='eu-west-1')","        table = dynamodb.create_table(","            TableName='JobApplications',","            KeySchema=[{'AttributeName': 'JobID', 'KeyType': 'HASH'}],","            AttributeDefinitions=[{'AttributeName': 'JobID', 'AttributeType': 'S'}],","            ProvisionedThroughput={'ReadCapacityUnits': 5, 'WriteCapacityUnits': 5},","        )","        yield table","","def test_index(client, mock_dynamodb_table):","    \"\"\"Test the index route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.get('/')","    assert response.status_code == 200","    assert b'Test Company' in response.data","    assert b'Developer' in response.data","","def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Redirect after adding job","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'","","def test_edit_job(client, mock_dynamodb_table):","    \"\"\"Test the edit_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/edit/1234', data={'status': 'Interview'})","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    item = response.get('Item')","    assert item['Status'] == 'Interview'","","def test_delete_job(client, mock_dynamodb_table):","    \"\"\"Test the delete_job route.\"\"\"","    job_data = {","        'JobID': '1234',","        'Company': 'Test Company',","        'Role': 'Developer',","        'Status': 'Applied',","        'DateApplied': '2025-04-08',","        'ResumeURL': '/uploads/test_resume.pdf',","    }","    mock_dynamodb_table.put_item(Item=job_data)","","    response = client.post('/delete/1234')","    assert response.status_code == 302","","    response = mock_dynamodb_table.get_item(Key={'JobID': '1234'})","    assert 'Item' not in response",""]}],[{"start":{"row":42,"column":0},"end":{"row":60,"column":47},"action":"remove","lines":["def test_add_job(client, mock_dynamodb_table, mocker):","    \"\"\"Test the add_job route.\"\"\"","    mock_file = mocker.Mock()","    mock_file.filename = 'test_resume.pdf'","    mock_file.save = mocker.Mock()","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': mock_file,","    }","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Redirect after adding job","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'"],"id":23},{"start":{"row":42,"column":0},"end":{"row":63,"column":0},"action":"insert","lines":["import io","","def test_add_job(client, mock_dynamodb_table):","    \"\"\"Test the add_job route with file upload.\"\"\"","    # Simulate a real file using BytesIO","    file_data = (io.BytesIO(b\"Dummy resume content\"), 'test_resume.pdf')","","    data = {","        'company': 'New Company',","        'role': 'Tester',","        'status': 'Applied',","        'resume': file_data,","    }","","    response = client.post('/add', data=data, content_type='multipart/form-data')","    assert response.status_code == 302  # Redirect after adding job","","    response = mock_dynamodb_table.scan()","    items = response['Items']","    assert len(items) > 0","    assert items[0]['Company'] == 'New Company'",""]}],[{"start":{"row":42,"column":0},"end":{"row":42,"column":9},"action":"remove","lines":["import io"],"id":24}],[{"start":{"row":41,"column":0},"end":{"row":42,"column":0},"action":"remove","lines":["",""],"id":25},{"start":{"row":40,"column":40},"end":{"row":41,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":3,"column":19},"end":{"row":4,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":4,"column":0},"end":{"row":4,"column":9},"action":"insert","lines":["import io"],"id":27}],[{"start":{"row":81,"column":40},"end":{"row":82,"column":0},"action":"insert","lines":["",""],"id":28},{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":82,"column":0},"end":{"row":82,"column":4},"action":"remove","lines":["    "],"id":29},{"start":{"row":81,"column":40},"end":{"row":82,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":99,"column":33},"end":{"row":100,"column":0},"action":"remove","lines":["",""],"id":30}]]},"timestamp":1744188200693}